name: Shader Binary Release

on:
  push:
    tags:
      - 'v*'

permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        shader_config:
          # Shaders that REQUIRE GStreamer (media features)
          - group: "media"
            features: ""
            gstreamer_required: true
            shaders: "audiovis,computecolors,droste,fft,gabornoise,matrix,pathtracing,scenecolor,spiral,voronoi,fluid,cnn,synth,blockgame"
          
          # Shaders that DON'T need GStreamer (pure GPU compute)
          - group: "no-media" 
            features: "--no-default-features"
            gstreamer_required: false
            shaders: "asahi,buddhabrot,gabor,lorenz,galaxy,lich,mandelbulb,satan,sdvert,sinh,roto,orbits,dna,genuary2025_6,nebula,rorschach,poe2,tree,2dneuron,spiralchaos,cliffordcompute,water,volumepassage,currents,jfa"
        
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive_ext: ".tar.gz"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            archive_ext: ".zip"
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
            archive_ext: ".tar.gz"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install GStreamer for macOS (only for media shaders)
      - name: Install macOS dependencies
        if: runner.os == 'macOS' && matrix.shader_config.gstreamer_required
        run: |
          # Download and install official GStreamer packages
          GSTREAMER_VERSION="1.26.0"
          curl -L "https://gstreamer.freedesktop.org/data/pkg/osx/$GSTREAMER_VERSION/gstreamer-1.0-$GSTREAMER_VERSION-universal.pkg" -o gstreamer.pkg
          curl -L "https://gstreamer.freedesktop.org/data/pkg/osx/$GSTREAMER_VERSION/gstreamer-1.0-devel-$GSTREAMER_VERSION-universal.pkg" -o gstreamer-devel.pkg
          
          sudo installer -pkg gstreamer.pkg -target /
          sudo installer -pkg gstreamer-devel.pkg -target /
          
          # Set environment variables for build and runtime
          echo "PKG_CONFIG_PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/lib/pkgconfig" >> $GITHUB_ENV
          echo "GST_PLUGIN_PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/lib/gstreamer-1.0" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/lib" >> $GITHUB_ENV

      # Install GStreamer for Linux (only for media shaders)
      - name: Install Linux dependencies
        if: runner.os == 'Linux' && matrix.shader_config.gstreamer_required
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libudev-dev \
            pkg-config \
            build-essential \
            libglib2.0-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-ugly \
            patchelf

      # Install GStreamer for Windows (only for media shaders)
      - name: Install Windows dependencies
        if: runner.os == 'Windows' && matrix.shader_config.gstreamer_required
        shell: pwsh
        run: |
          Write-Host "Starting GStreamer installation process..."
          $gstVer = "1.26.0"
          $tempDir = "C:\gst-temp"
          $installDir = "C:\gstreamer"
          
          # Create necessary directories
          New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
          New-Item -ItemType Directory -Force -Path $installDir | Out-Null

          Write-Host "Downloading installers..."
          $baseUrl = "https://gstreamer.freedesktop.org/data/pkg/windows/$gstVer/msvc"
          $runtimeUrl = "$baseUrl/gstreamer-1.0-msvc-x86_64-$gstVer.msi"
          $develUrl = "$baseUrl/gstreamer-1.0-devel-msvc-x86_64-$gstVer.msi"
          
          Write-Host "Downloading MSVC 64-bit runtime installer..."
          Invoke-WebRequest -Uri $runtimeUrl -OutFile "$tempDir\gstreamer.msi"
          
          Write-Host "Downloading MSVC 64-bit development installer..."
          Invoke-WebRequest -Uri $develUrl -OutFile "$tempDir\gstreamer-devel.msi"

          Write-Host "Installing runtime package..."
          $proc = Start-Process msiexec -ArgumentList "/i", "`"$tempDir\gstreamer.msi`"", "INSTALLDIR=$installDir", "/qn" -Wait -PassThru -NoNewWindow
          if ($proc.ExitCode -ne 0) {
            Write-Host "Runtime installation failed with code: $($proc.ExitCode)"
            exit 1
          }

          Write-Host "Installing development package..."
          $proc = Start-Process msiexec -ArgumentList "/i", "`"$tempDir\gstreamer-devel.msi`"", "INSTALLDIR=$installDir", "/qn" -Wait -PassThru -NoNewWindow
          if ($proc.ExitCode -ne 0) {
            Write-Host "Development installation failed with code: $($proc.ExitCode)"
            exit 1
          }
          
          Write-Host "Looking for GStreamer installation..."
          $expectedPath = "$installDir\1.0\msvc_x86_64"
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          while (-not (Test-Path $expectedPath)) {
            if ($stopwatch.Elapsed.TotalSeconds -gt 60) {
              Write-Host "Timeout waiting for installation directory. Current structure:"
              Get-ChildItem -Path $installDir -Recurse | Format-List
              exit 1
            }
            Start-Sleep -Seconds 5
            Write-Host "Waiting for installation directory... ($([int]$stopwatch.Elapsed.TotalSeconds)s)"
          }
          
          Write-Host "Setting environment variables..."
          $env:GSTREAMER_1_0_ROOT_MSVC_X86_64 = $expectedPath
          $env:GST_PLUGIN_PATH = "$expectedPath\lib\gstreamer-1.0"
          $env:PKG_CONFIG_PATH = "$expectedPath\lib\pkgconfig"
          $env:Path = "$expectedPath\bin;" + $env:Path
          
          # Set environment variables for subsequent steps
          "GSTREAMER_1_0_ROOT_MSVC_X86_64=$expectedPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          "GST_PLUGIN_PATH=$expectedPath\lib\gstreamer-1.0" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PKG_CONFIG_PATH=$expectedPath\lib\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Append
          "PATH=$expectedPath\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Build all binaries for this shader group
      - name: Build binaries
        shell: bash
        run: |
          echo "Building ${{ matrix.shader_config.group }} shaders with features: ${{ matrix.shader_config.features }}"
          IFS=',' read -ra SHADERS <<< "${{ matrix.shader_config.shaders }}"
          for shader in "${SHADERS[@]}"; do
            echo "Building shader: $shader"
            cargo build --release --bin "$shader" ${{ matrix.shader_config.features }}
          done

      # Bundle GStreamer files for media shaders
      - name: Bundle GStreamer for media shaders
        if: matrix.shader_config.gstreamer_required
        shell: bash
        run: |
          echo "🔧 Creating GStreamer bundle for media shaders on ${{ runner.os }}..."
          
          BUNDLE_DIR="gstreamer_bundle"
          mkdir -p "$BUNDLE_DIR/lib"
          mkdir -p "$BUNDLE_DIR/lib/gstreamer-1.0"
          mkdir -p "$BUNDLE_DIR/etc/ssl/certs"
          
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "📦 Bundling GStreamer for macOS..."
            GSTREAMER_ROOT="/Library/Frameworks/GStreamer.framework/Versions/1.0"
            LIB_EXT="dylib"
            
            # Core libraries (macOS)
            CORE_LIBS=(
              "libgstreamer-1.0.0.dylib" "libgstbase-1.0.0.dylib" "libgstapp-1.0.0.dylib"
              "libgstvideo-1.0.0.dylib" "libgstaudio-1.0.0.dylib" "libgstpbutils-1.0.0.dylib"
              "libgsttag-1.0.0.dylib" "libgstfft-1.0.0.dylib" "libgstgl-1.0.0.dylib"
              "libgstvulkan-1.0.0.dylib" "libgstcodecparsers-1.0.0.dylib" "libgstriff-1.0.0.dylib"
              "libgstrtp-1.0.0.dylib" "libglib-2.0.0.dylib" "libgobject-2.0.0.dylib"
              "libgio-2.0.0.dylib" "libgmodule-2.0.0.dylib" "libintl.8.dylib" "libffi.7.dylib"
              "libpcre2-8.0.dylib" "liborc-0.4.0.dylib" "libz.1.dylib" "libbz2.1.dylib"
              "libavformat.61.dylib" "libavutil.59.dylib" "libavcodec.61.dylib"
              "libavfilter.10.dylib" "libswresample.5.dylib" "libSoundTouch.2.dylib" "libMoltenVK.dylib"
            )
            
            # Plugins (macOS)
            PLUGINS=(
              "libgstcoreelements.dylib" "libgstapp.dylib" "libgstplayback.dylib"
              "libgsttypefindfunctions.dylib" "libgstvideoconvertscale.dylib" "libgstvideorate.dylib"
              "libgstaudioconvert.dylib" "libgstaudioresample.dylib" "libgstvolume.dylib"
              "libgstosxaudio.dylib" "libgstautodetect.dylib" "libgstaudiotestsrc.dylib"
              "libgstaudiomixer.dylib" "libgstspectrum.dylib" "libgstsoundtouch.dylib"
              "libgstaudioparsers.dylib" "libgstlibav.dylib" "libgstisomp4.dylib"
              "libgstapplemedia.dylib" "libgstvideoparsersbad.dylib"
            )
            
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Bundling GStreamer for Windows..."
            GSTREAMER_ROOT="C:/gstreamer/1.0/msvc_x86_64"
            LIB_EXT="dll"
            
            # Core libraries (Windows)
            CORE_LIBS=(
              "gstreamer-1.0-0.dll" "gstbase-1.0-0.dll" "gstapp-1.0-0.dll"
              "gstvideo-1.0-0.dll" "gstaudio-1.0-0.dll" "gstpbutils-1.0-0.dll"
              "gsttag-1.0-0.dll" "gstfft-1.0-0.dll" "gstgl-1.0-0.dll"
              "gstvulkan-1.0-0.dll" "gstcodecparsers-1.0-0.dll" "gstriff-1.0-0.dll"
              "gstrtp-1.0-0.dll" "glib-2.0-0.dll" "gobject-2.0-0.dll"
              "gio-2.0-0.dll" "gmodule-2.0-0.dll" "intl-8.dll" "ffi-7.dll"
              "pcre2-8-0.dll" "orc-0.4-0.dll" "z.dll" "bz2.dll"
              "avformat-61.dll" "avutil-59.dll" "avcodec-61.dll"
              "avfilter-10.dll" "swresample-5.dll"
            )
            
            # Plugins (Windows) 
            PLUGINS=(
              "gstcoreelements.dll" "gstapp.dll" "gstplayback.dll"
              "gsttypefindfunctions.dll" "gstvideoconvertscale.dll" "gstvideorate.dll"
              "gstaudioconvert.dll" "gstaudioresample.dll" "gstvolume.dll"
              "gstwasapi.dll" "gstautodetect.dll" "gstaudiotestsrc.dll"
              "gstaudiomixer.dll" "gstspectrum.dll" "gstsoundtouch.dll"
              "gstaudioparsers.dll" "gstlibav.dll" "gstisomp4.dll"
              "gstvideoparsersbad.dll"
            )
            
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            echo " Bundling GStreamer for Linux..."
            GSTREAMER_ROOT="/usr"
            LIB_EXT="so"
            
            # Core libraries (Linux)
            CORE_LIBS=(
              "libgstreamer-1.0.so.0" "libgstbase-1.0.so.0" "libgstapp-1.0.so.0"
              "libgstvideo-1.0.so.0" "libgstaudio-1.0.so.0" "libgstpbutils-1.0.so.0" 
              "libgsttag-1.0.so.0" "libgstfft-1.0.so.0" "libgstgl-1.0.so.0"
              "libgstvulkan-1.0.so.0" "libgstcodecparsers-1.0.so.0" "libgstriff-1.0.so.0"
              "libgstrtp-1.0.so.0" "libglib-2.0.so.0" "libgobject-2.0.so.0"
              "libgio-2.0.so.0" "libgmodule-2.0.so.0" "liborc-0.4.so.0"
            )
            
            # Plugins (Linux)
            PLUGINS=(
              "libgstcoreelements.so" "libgstapp.so" "libgstplayback.so"
              "libgsttypefindfunctions.so" "libgstvideoconvert.so" "libgstvideorate.so"
              "libgstaudioconvert.so" "libgstaudioresample.so" "libgstvolume.so"
              "libgstpulseaudio.so" "libgstautodetect.so" "libgstaudiotestsrc.so"
              "libgstaudiomixer.so" "libgstspectrum.so" "libgstsoundtouch.so"
              "libgstaudioparsers.so" "libgstlibav.so" "libgstisomp4.so"
              "libgstvideoparsersbad.so"
            )
          fi
          
          # Copy libraries
          for lib in "${CORE_LIBS[@]}"; do
            if [[ -f "$GSTREAMER_ROOT/lib/$lib" ]]; then
              cp "$GSTREAMER_ROOT/lib/$lib" "$BUNDLE_DIR/lib/"
            elif [[ -f "$GSTREAMER_ROOT/bin/$lib" ]]; then
              cp "$GSTREAMER_ROOT/bin/$lib" "$BUNDLE_DIR/lib/"
            fi
          done
          
          # Copy plugins
          for plugin in "${PLUGINS[@]}"; do
            if [[ -f "$GSTREAMER_ROOT/lib/gstreamer-1.0/$plugin" ]]; then
              cp "$GSTREAMER_ROOT/lib/gstreamer-1.0/$plugin" "$BUNDLE_DIR/lib/gstreamer-1.0/"
            fi
          done
          
          # Copy SSL certificates (if available)
          if [[ -f "$GSTREAMER_ROOT/etc/ssl/certs/ca-certificates.crt" ]]; then
            cp "$GSTREAMER_ROOT/etc/ssl/certs/ca-certificates.crt" "$BUNDLE_DIR/etc/ssl/certs/"
          elif [[ -f "/etc/ssl/certs/ca-certificates.crt" ]]; then
            cp "/etc/ssl/certs/ca-certificates.crt" "$BUNDLE_DIR/etc/ssl/certs/"
          fi
          
          echo "✅ GStreamer bundle created: $(du -sh $BUNDLE_DIR | cut -f1)"

      # Create release packages for each shader in the group
      - name: Prepare release packages
        shell: bash
        run: |
          IFS=',' read -ra SHADERS <<< "${{ matrix.shader_config.shaders }}"
          for shader in "${SHADERS[@]}"; do
            echo "Packaging shader: $shader"
            
            # Create directory structure
            mkdir -p "release/$shader/shaders"
            
            # Copy the binary
            cp "target/release/$shader${{ matrix.ext }}" "release/$shader/"
            
            # Copy shader files
            cp "shaders/$shader.wgsl" "release/$shader/shaders/"
            cp "shaders/vertex.wgsl" "release/$shader/shaders/"
            
            # Embed GStreamer for media shaders (cross-platform)
            if [[ "${{ matrix.shader_config.gstreamer_required }}" == "true" ]]; then
              echo " Embedding GStreamer for $shader..."
              
              # Copy GStreamer bundle
              cp -r "gstreamer_bundle" "release/$shader/gstreamer"
              
              # Fix library paths (platform-specific)
              echo "🔧 Fixing library paths for ${{ runner.os }}..."
              BINARY="release/$shader/$shader${{ matrix.ext }}"
              BUNDLE_LIB_DIR="release/$shader/gstreamer/lib"
              BUNDLE_PLUGIN_DIR="$BUNDLE_LIB_DIR/gstreamer-1.0"
              
              echo "Debug: Binary path: $BINARY"
              echo "Debug: Bundle lib dir: $BUNDLE_LIB_DIR"
              echo "Debug: Bundle exists: $(test -d release/$shader/gstreamer && echo yes || echo no)"
              
              if [[ "${{ runner.os }}" == "macOS" ]]; then
                echo "🍎 Processing macOS library paths..."
                
                # Fix main binary
                echo "Fixing main binary: $BINARY"
                if [[ -f "$BINARY" ]]; then
                  otool -L "$BINARY" 2>/dev/null | grep -E "(@rpath|/Library/Frameworks/GStreamer.framework)" | awk '{print $1}' | while read dep; do
                    if [[ -n "$dep" ]]; then
                      lib_name=$(basename "$dep")
                      new_path="@loader_path/gstreamer/lib/$lib_name"
                      echo "  Changing: $dep -> $new_path"
                      install_name_tool -change "$dep" "$new_path" "$BINARY" 2>/dev/null || true
                    fi
                  done
                else
                  echo "❌ Binary not found: $BINARY"
                fi
                
                # Fix all libraries
                echo "Fixing libraries in: $BUNDLE_LIB_DIR"
                if [[ -d "$BUNDLE_LIB_DIR" ]]; then
                  for lib in "$BUNDLE_LIB_DIR"/*.dylib; do
                    if [[ -f "$lib" ]]; then
                      lib_name=$(basename "$lib")
                      echo "  Processing library: $lib_name"
                      install_name_tool -id "@loader_path/$lib_name" "$lib" 2>/dev/null || true
                      
                      otool -L "$lib" 2>/dev/null | grep -E "(@rpath|/Library/Frameworks/GStreamer.framework)" | awk '{print $1}' | while read dep; do
                        if [[ -n "$dep" ]]; then
                          dep_lib_name=$(basename "$dep")
                          new_dep_path="@loader_path/$dep_lib_name"
                          install_name_tool -change "$dep" "$new_dep_path" "$lib" 2>/dev/null || true
                        fi
                      done
                    fi
                  done
                else
                  echo "❌ Library directory not found: $BUNDLE_LIB_DIR"
                fi
                
                # Fix all plugins
                echo "Fixing plugins in: $BUNDLE_PLUGIN_DIR"
                if [[ -d "$BUNDLE_PLUGIN_DIR" ]]; then
                  for plugin in "$BUNDLE_PLUGIN_DIR"/*.dylib; do
                    if [[ -f "$plugin" ]]; then
                      plugin_name=$(basename "$plugin")
                      echo "  Processing plugin: $plugin_name"
                      install_name_tool -id "@loader_path/../$plugin_name" "$plugin" 2>/dev/null || true
                      
                      otool -L "$plugin" 2>/dev/null | grep -E "(@rpath|/Library/Frameworks/GStreamer.framework)" | awk '{print $1}' | while read dep; do
                        if [[ -n "$dep" ]]; then
                          dep_lib_name=$(basename "$dep")
                          new_dep_path="@loader_path/../$dep_lib_name"
                          install_name_tool -change "$dep" "$new_dep_path" "$plugin" 2>/dev/null || true
                        fi
                      done
                    fi
                  done
                else
                  echo "❌ Plugin directory not found: $BUNDLE_PLUGIN_DIR"
                fi
                
              elif [[ "${{ runner.os }}" == "Linux" ]]; then
                # Linux: Use patchelf and $ORIGIN rpath
                echo "Setting rpath for Linux binary..."
                if command -v patchelf >/dev/null 2>&1; then
                  patchelf --set-rpath '$ORIGIN/gstreamer/lib' "$BINARY" 2>/dev/null || true
                  
                  # Fix all libraries
                  for lib in "$BUNDLE_LIB_DIR"/*.so*; do
                    if [[ -f "$lib" ]]; then
                      patchelf --set-rpath '$ORIGIN' "$lib" 2>/dev/null || true
                    fi
                  done
                  
                  # Fix all plugins
                  for plugin in "$BUNDLE_PLUGIN_DIR"/*.so; do
                    if [[ -f "$plugin" ]]; then
                      patchelf --set-rpath '$ORIGIN/..' "$plugin" 2>/dev/null || true
                    fi
                  done
                else
                  echo "⚠️ patchelf not available, library paths may not work correctly"
                fi
                
              elif [[ "${{ runner.os }}" == "Windows" ]]; then
                # Windows: DLLs use current directory by default, so bundling is sufficient
                echo "Windows DLL bundling complete (no path fixing needed)"
              fi
              
              echo "✅ GStreamer embedded and paths fixed"
            fi
            
            # Create appropriate README based on shader group
            echo "$shader Shader" > "release/$shader/README.txt"
            echo "Requirements:" >> "release/$shader/README.txt"
            
            if [[ "${{ matrix.shader_config.gstreamer_required }}" == "true" ]]; then
              echo "1. No additional dependencies required - GStreamer is bundled!" >> "release/$shader/README.txt"
              echo "2. The 'shaders' directory must remain in the same folder as the executable." >> "release/$shader/README.txt"
              echo "3. Self-contained build with embedded media support (~80-100MB)." >> "release/$shader/README.txt"
            else
              echo "1. No additional dependencies required - just run the executable!" >> "release/$shader/README.txt"
              echo "2. The 'shaders' directory must remain in the same folder as the executable." >> "release/$shader/README.txt"
              echo "3. This is a lightweight build without media support." >> "release/$shader/README.txt"
            fi
            
            # Windows-specific: create .bat launcher
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              echo "@echo off" > "release/$shader/run_$shader.bat"
              echo "if not exist shaders mkdir shaders" >> "release/$shader/run_$shader.bat"
              echo "$shader.exe" >> "release/$shader/run_$shader.bat"
            fi

            # Create launcher script for Linux/MacOS
            if [[ "${{ runner.os }}" != "Windows" ]]; then
              echo '#!/bin/bash' > "release/$shader/run_$shader.sh"
              echo 'mkdir -p shaders' >> "release/$shader/run_$shader.sh"
              
              # Add GStreamer environment setup for media shaders
              if [[ "${{ matrix.shader_config.gstreamer_required }}" == "true" ]]; then
                echo 'SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> "release/$shader/run_$shader.sh"
                echo 'export GST_PLUGIN_PATH="$SCRIPT_DIR/gstreamer/lib/gstreamer-1.0"' >> "release/$shader/run_$shader.sh"
                echo 'export GST_PLUGIN_SYSTEM_PATH=""' >> "release/$shader/run_$shader.sh"
                echo 'export GST_REGISTRY="$SCRIPT_DIR/gstreamer/registry.bin"' >> "release/$shader/run_$shader.sh"
                
                # Linux-specific: Add library path
                if [[ "${{ runner.os }}" == "Linux" ]]; then
                  echo 'export LD_LIBRARY_PATH="$SCRIPT_DIR/gstreamer/lib:$LD_LIBRARY_PATH"' >> "release/$shader/run_$shader.sh"
                fi
              fi
              
              echo "./$shader" >> "release/$shader/run_$shader.sh"
              chmod +x "release/$shader/run_$shader.sh"
            fi
          done

      # Create archives for each shader
      - name: Create archives
        shell: bash
        run: |
          cd release
          IFS=',' read -ra SHADERS <<< "${{ matrix.shader_config.shaders }}"
          for shader in "${SHADERS[@]}"; do
            echo "Creating archive for: $shader"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              7z a "../$shader-${{ matrix.target }}${{ matrix.archive_ext }}" "$shader"
            else
              tar -czf "../$shader-${{ matrix.target }}${{ matrix.archive_ext }}" "$shader"
            fi
          done

      # Upload artifacts for each shader
      - name: Upload artifacts
        shell: bash
        run: |
          IFS=',' read -ra SHADERS <<< "${{ matrix.shader_config.shaders }}"
          for shader in "${SHADERS[@]}"; do
            echo "Uploading artifact for: $shader"
          done
          
      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shader_config.group }}-${{ matrix.target }}
          path: "*-${{ matrix.target }}${{ matrix.archive_ext }}"

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true